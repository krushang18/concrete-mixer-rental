name: Deploy Concrete Mixer Rental

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies
        run: cd backend && npm ci
      - name: Run tests
        run: cd backend && npm test || echo "No tests configured yet"
      - name: Security audit
        run: cd backend && npm audit --audit-level high || echo "Security vulnerabilities found but continuing deployment"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Starting Phase 2 deployment..."
            cd /var/www/fioriforrent.com

            # Configure git
            git config --global --add safe.directory /var/www/fioriforrent.com

            # Fix permissions for git operations
            sudo chown -R krushang:krushang /var/www/fioriforrent.com

            # Pull latest changes
            echo "Pulling latest code..."
            git pull origin main
            echo "ðŸ“¦ Installing backend dependencies..."
            cd backend
            npm ci --production
            cd ..


            # Update backend dependencies (for any new packages in Phase 2)
            echo "Installing/updating backend dependencies..."
            cd backend
            npm ci --production
            cd ..

            # Remove old HTML files and deploy new ones
            echo "Deploying frontend files..."
            sudo rm -f /var/www/fioriforrent.com/*.html
            sudo cp customer-site/*.html /var/www/fioriforrent.com/
            sudo cp customer-site/robots.txt /var/www/fioriforrent.com/ 2>/dev/null || echo "robots.txt not found, skipping"
            sudo cp customer-site/sitemap.xml /var/www/fioriforrent.com/ 2>/dev/null || echo "sitemap.xml not found, skipping"

            # Copy assets if they exist
            if [ -d "customer-site/assets" ]; then
              echo "Copying assets directory..."
              sudo cp -r customer-site/assets/* /var/www/fioriforrent.com/assets/ 2>/dev/null || echo "No assets to copy"
            fi

            # Set final permissions
            sudo chown -R www-data:www-data /var/www/fioriforrent.com/
            sudo chown -R krushang:krushang /var/www/fioriforrent.com/.git

            # Create uploads directory for Phase 2 features (company logos, signatures)
            echo "Creating upload directories for Phase 2..."
            sudo mkdir -p /var/www/fioriforrent.com/uploads/company
            sudo mkdir -p /var/www/fioriforrent.com/uploads/quotations
            sudo chown -R www-data:www-data /var/www/fioriforrent.com/uploads

            # Restart application
            echo "Restarting application..."
            sudo pm2 restart fiori-for-rent

            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 15

            # Verify deployment with multiple checks
            echo "Verifying deployment..."

            # Check if PM2 process is running
            if sudo pm2 list | grep -q "fiori-for-rent.*online"; then
              echo "âœ“ PM2 process is running"
            else
              echo "âœ— PM2 process is not running"
              sudo pm2 logs fiori-for-rent --lines 10
              exit 1
            fi

            # Check health endpoint
            if curl -f http://127.0.0.1:3000/health > /dev/null 2>&1; then
              echo "âœ“ Health endpoint responding"
            else
              echo "âœ— Health endpoint not responding"
              sudo pm2 logs fiori-for-rent --lines 10
              exit 1
            fi

            # Check customer API endpoint
            if curl -f http://127.0.0.1:3000/api/customer/health > /dev/null 2>&1; then
              echo "âœ“ Customer API responding"
            else
              echo "âœ— Customer API not responding"
              sudo pm2 logs fiori-for-rent --lines 10
              exit 1
            fi

            # Check database connectivity (test with simple query)
            echo "Testing database connectivity..."
            if mysql -u cmr_prod -pkrushang@working18 -h 127.0.0.1 concrete_mixer_rental -e "SELECT 1;" > /dev/null 2>&1; then
              echo "âœ“ Database connection successful"
            else
              echo "âœ— Database connection failed"
              exit 1
            fi

            # Check website accessibility
            if curl -f https://fioriforrent.com/ > /dev/null 2>&1; then
              echo "âœ“ Website accessible via HTTPS"
            else
              echo "âœ— Website not accessible via HTTPS"
              exit 1
            fi

            echo "ðŸŽ‰ Phase 2 deployment completed successfully!"
            echo "Application is running with all Phase 2 features enabled"

            # Show final status
            echo "=== Deployment Summary ==="
            echo "PM2 Status:"
            sudo pm2 list
            echo ""
            echo "Recent logs:"
            sudo pm2 logs fiori-for-rent --lines 5 --nostream
